{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPYst9zwpYrpeA45r/7vyjM"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Dados os nn vértices em sentido anti-horário de um polígono convexo PP e mm pontos (x_i,y_i)(x \n","i\n","​\n"," ,y \n","i\n","​\n"," ). Escreva um programa que verifica se cada ponto (x_i,y_i)(x \n","i\n","​\n"," ,y \n","i\n","​\n"," ) se encontra no interior de PP (incluindo as arestas) ou não."],"metadata":{"id":"YmgJr2hFO4BX"}},{"cell_type":"markdown","source":["NÃO FUI EU QUEM FEZ"],"metadata":{"id":"2y7dzVWy34vG"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"f7p-MYmF_x-H"},"outputs":[],"source":["poligono = input().split()\n","pontos = input().split()\n","\n","index = 0\n","areapoligono = 0\n","p = 0\n","modarestas = []\n","while (p+2)!=len(poligono):\n","    xi1 = float(poligono[p])\n","    yi1 = float(poligono[p+1])\n","    xi2 = float(poligono[p+2])\n","    yi2 = float(poligono[p+3])\n","    distancia = ((xi1-xi2)*(xi1-xi2) + (yi1-yi2)*(yi1-yi2))**(1/2)\n","    modarestas.append(distancia)\n","    p = p +2\n","xi1 = float(poligono[p])\n","yi1 = float(poligono[p+1])\n","xi2 = float(poligono[0])\n","yi2 = float(poligono[1])\n","distancia = ((xi1-xi2)*(xi1-xi2) + (yi1-yi2)*(yi1-yi2))**(1/2)\n","modarestas.append(distancia)\n","\n","\n","areapoligono = 0\n","p=0\n","soma = 0\n","subt = 0\n","while (p+2)!=len(poligono):\n","    xi = float(poligono[p])\n","    yj = float(poligono[p+3])\n","    yi = float(poligono[p+1])\n","    xj = float(poligono[p+2])\n","    soma = soma + xi*yj\n","    subt = subt + yi*xj\n","    p = p + 2\n","xi = float(poligono[p])\n","yj = float(poligono[1])\n","yi = float(poligono[p+1])\n","xj = float(poligono[0])\n","soma = soma + xi*yj\n","subt = subt + yi*xj\n","p=0\n","areapoligono = abs(soma-subt)/2\n","while index!=len(pontos):\n","    xp = float(pontos[index])\n","    yp = float(pontos[index+1])\n","    distancias = []\n","    i = 0\n","    while i!= len(poligono):\n","        xi = float(poligono[i])\n","        yi = float(poligono[i+1])\n","        distancia = ((xp-xi)*(xp-xi) + (yp-yi)*(yp-yi))**(0.5)\n","        distancias.append(distancia)\n","        i = i+ 2\n","    area2 = 0\n","    i = 0\n","    while (i+1)!= len(distancias):\n","        d1 = float(distancias[i])\n","        d2 = float(distancias[i+1])\n","        l = float(modarestas[i])\n","        p = (d1+d2+l)/2\n","        area2 = area2 + (p*(p-d1)*(p-d2)*(p-l))**0.5\n","        i = i+1\n","    d1 = float(distancias[i])\n","    d2 = float(distancias[0])\n","    l = float(modarestas[len(modarestas)-1])\n","    p = (d1+d2+l)/2\n","    area2 = area2 + (p*(p-d1)*(p-d2)*(p-l))**0.5\n","\n","    if round(area2,4) == areapoligono:\n","        print(\"S\")\n","    else:\n","        print(\"N\")\n","    index = index+2"]}]}